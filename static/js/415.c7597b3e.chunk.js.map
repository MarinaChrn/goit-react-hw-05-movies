{"version":3,"file":"static/js/415.c7597b3e.chunk.js","mappings":"iNAGaA,GAAOC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,2H,SCAJE,EAAe,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,QAASC,EAAU,EAAVA,MACnC,OACI,yBACI,SAACL,EAAD,CAAMM,GAAE,kBAAaF,EAAQG,IAAMC,KAAG,EAAEH,MAAOA,EAA/C,wBAA2EI,IAAhBL,EAAQM,MAAmBN,EAAQM,MAAMN,EAAQO,SAGvH,ECPYC,EAAOX,EAAAA,GAAAA,GAAH,kLCcjB,EAXkB,SAAC,GAAkB,IAAjBY,EAAgB,EAAhBA,WACVC,GAAWC,EAAAA,EAAAA,MACjB,OACI,SAACH,EAAD,UAC0B,IAApBC,EAAWG,QACTH,EAAWI,KAAI,SAAAC,GAAO,OAAI,SAACf,EAAD,CAAcC,QAASc,EAA0Bb,MAAO,CAAEc,KAAML,IAA3BI,EAAQX,GAAjD,KAIrC,C,kHC2BD,UAnCa,WACT,OAA0Ba,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAAoBJ,EAAAA,EAAAA,UAAS,MAArBK,GAAR,eAsBA,OApBAC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAa,IAAIC,gBADb,wCAEV,oGAEQJ,GAAa,GACbC,EAAS,MAHjB,UAIoCI,EAAAA,EAAAA,IAAoBF,GAJxD,OAIcG,EAJd,OAKQR,GAAS,OAAIQ,EAAcC,UALnC,gDAOQN,EAAS,EAAD,IAPhB,yBAUQD,GAAa,GAVrB,6EAFU,sBAiBV,OAjBU,mCAeVQ,GAEO,kBAAKL,EAAWM,OAAhB,CACV,GAAC,KAKM,4BACMV,IAAa,uCACZA,IAAe,SAAC,IAAD,CAAWV,WAAYQ,MAGnD,C","sources":["components/ListFilmItem.styled.js","components/ListFilmItem.jsx","components/ListFilms.styled.js","components/ListFilms.jsx","pages/Home.jsx"],"sourcesContent":["import styled from \"styled-components\";\nimport { NavLink } from \"react-router-dom\";\n\nexport const Link = styled(NavLink)`\n    text-decoration: none;\n    color: black;\n    &:hover, &:focus {\n        color: red;\n    }\n`","import { Link } from \"./ListFilmItem.styled\";\nimport PropTypes from \"prop-types\"\n\nexport const ListFilmItem = ({filmInf, state})=> {\n    return (\n        <li>\n            <Link to={`/movies/${filmInf.id}`} end  state={state}>{`${(filmInf.title!==undefined)?filmInf.title:filmInf.name}`}</Link>\n        </li>\n    )\n}\n\nListFilmItem.propTypes = {\n    filmInf: PropTypes.object,\n    state: PropTypes.object.isRequired,\n}","import styled from \"styled-components\";\n\nexport const List = styled.ul`\n    list-style: disc;\n    margin-left: 20px;\n    margin-top: 20px;\n    padding: 0px;\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n`","import { useLocation } from \"react-router-dom\";\nimport {ListFilmItem} from \"./ListFilmItem\";\nimport { List } from \"./ListFilms.styled\";\nimport PropTypes from \"prop-types\";\n\nconst ListFilms = ({arrayFilms}) => {\n    const location = useLocation();\n    return (\n        <List>\n            {(arrayFilms.length!==0)&&(\n                arrayFilms.map(element => <ListFilmItem filmInf={element} key={element.id} state={{ from: location }}/>)\n            )}\n        </List>\n    )\n}\n\nexport default ListFilms;\nListFilms.propTypes = {\n    arrayFilms: PropTypes.array.isRequired,\n}","\nimport {fetchTrendingMovies} from \"api\";\nimport ListFilms from \"components/ListFilms\";\nimport { useEffect } from \"react\";\nimport { useState } from \"react\";\n\nconst Home = () => {\n    const [trend, setTrend] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const [,setError] = useState(null);\n\n    useEffect(()=>{\n        const controller = new AbortController();\n        async function fetchSearch () {    \n            try {\n                setIsLoading(true);\n                setError(null);\n                const fetchedSearch = await fetchTrendingMovies(controller)\n                setTrend([...fetchedSearch.results])\n            } catch(errors) {\n                setError(errors)\n                \n            } finally {\n                setIsLoading(false);\n            }\n        }\n        fetchSearch ()\n\n        return(()=> controller.abort())\n    },[])\n\n    return (\n        \n        (\n            <main>\n                {(isLoading)&&(<p>Loading...</p>)}\n                {(!isLoading) && (<ListFilms arrayFilms={trend}/>)}\n            </main>\n        )\n    )}\n\nexport default Home;"],"names":["Link","styled","NavLink","ListFilmItem","filmInf","state","to","id","end","undefined","title","name","List","arrayFilms","location","useLocation","length","map","element","from","useState","trend","setTrend","isLoading","setIsLoading","setError","useEffect","controller","AbortController","fetchTrendingMovies","fetchedSearch","results","fetchSearch","abort"],"sourceRoot":""}