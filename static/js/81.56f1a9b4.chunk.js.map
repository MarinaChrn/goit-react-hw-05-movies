{"version":3,"file":"static/js/81.56f1a9b4.chunk.js","mappings":"sOAEAA,EAAAA,EAAAA,SAAAA,QAAuB,8BACvB,IAAMC,EAAU,mCAEHC,EAAmB,mCAAG,WAAMC,GAAN,yFACVH,EAAAA,EAAAA,IAAA,sCAAyCC,GAAW,CAACG,OAAQD,EAAWC,SAD9D,uBACxBC,EADwB,EACxBA,KADwB,kBAExBA,GAFwB,2CAAH,sDAKnBC,EAAiB,mCAAG,WAAMC,EAAIJ,GAAV,yFACRH,EAAAA,EAAAA,IAAA,mBAAsBO,EAAtB,oBAAoCN,GAAW,CAACG,OAAQD,EAAWC,SAD3D,uBACtBC,EADsB,EACtBA,KADsB,kBAEtBA,GAFsB,2CAAH,uD,iKCJjBG,EAAY,WAAM,IAAD,IACpBC,GAAUC,EAAAA,EAAAA,MAAYC,SAC5B,GAAkCC,EAAAA,EAAAA,UAAS,CAAC,GAA5C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAEMC,GAAWC,EAAAA,EAAAA,MACXC,GAAsBC,EAAAA,EAAAA,QAAM,oBAACH,EAASI,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,KAwB3D,OAtBAC,EAAAA,EAAAA,YAAU,WACN,IAAMtB,EAAa,IAAIuB,gBADb,wCAEV,oGAEQV,GAAa,GACbE,EAAS,MAHjB,UAIoCZ,EAAAA,EAAAA,IAAkBG,EAAQN,GAJ9D,OAIcwB,EAJd,OAKQb,EAAaa,GALrB,gDAOQT,EAAS,EAAD,IAPhB,yBASQF,GAAa,GATrB,6EAFU,sBAgBV,OAhBU,mCAcVY,GAEO,WACHzB,EAAW0B,OACd,CACJ,GAAC,CAACpB,KAGa,IAAZM,GAEI,uCAGQ,IAAZA,GAAqC,IAAnBF,EAAUiB,QAAab,OAA7C,GAEQ,SAAC,EAAAc,SAAD,CAAUC,UAAU,SAAC,IAAD,IAApB,UACI,4BACI,SAAC,KAAD,CAASC,GAAIZ,EAAoBa,QAAjC,sBACA,4BACI,gBAAKC,IAAMtB,EAAUuB,aAAX,6CAAgEvB,EAAUuB,aAAgBC,IAAI,GAAGC,MAAM,WACjH,4BACI,6BAAwBC,IAAlB1B,EAAU2B,MAAmB3B,EAAU2B,MAAM3B,EAAU4B,QAC7D,wCAAiB5B,EAAU6B,cAAmD,GAAnC7B,EAAU6B,aAAcC,QAAQ,GAA3E,QACA,sCACA,uBAAI9B,EAAU+B,YACd,oCACA,uBAAK/B,EAAUgC,QAAUhC,EAAUgC,OAAOC,KAAI,SAAAC,GAAK,OAAGA,EAAMN,IAAT,IAAeO,KAAK,cAG/E,yBACI,yBACI,SAAC,KAAD,CAAMf,GAAG,OAAOV,MAAOJ,EAASI,MAAhC,0BAO3B,C","sources":["api.js","pages/AboutFilm.jsx"],"sourcesContent":["import axios from \"axios\";\n\naxios.defaults.baseURL=\"https://api.themoviedb.org/\";\nconst KEY_API = 'c67a48adb3404d662a84d5e73bbe6a15';\n\nexport const fetchTrendingMovies = async(controller)=> {\n    const {data} = await axios.get(`/3/trending/all/day?api_key=${KEY_API}`, {signal: controller.signal});\n    return data ;\n}\n\nexport const fetchDetailsMovie = async(id, controller)=> {\n    const {data} = await axios.get(`/3/movie/${id}?api_key=${KEY_API}`, {signal: controller.signal});\n    return data ;\n}\n\nexport const fetchCastMovie = async(id, controller)=> {\n    const {data} = await axios.get(`/3/movie/${id}/credits?api_key=${KEY_API}`, {signal: controller.signal});\n    return data ;\n}\n\n","import { fetchDetailsMovie } from \"api\";\nimport { useParams, useLocation, NavLink, Link} from \"react-router-dom\";\nimport { useEffect, useState,useRef } from \"react\";\nimport { Loading } from \"components/Loading\";\nimport { Suspense } from \"react\";\n\nexport const AboutFilm = ()=> {\n    const movieId = useParams().moviesId;\n    const [infoMovie, setInfoMovie] = useState({});\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    const location = useLocation();\n    const backLinkLocationRef = useRef(location.state?.from ?? '/');\n\n    useEffect(()=>{\n        const controller = new AbortController();\n        async function fetchSearch () {    \n            try {\n                setIsLoading(true);\n                setError(null);\n                const fetchedSearch = await fetchDetailsMovie(movieId,controller)\n                setInfoMovie(fetchedSearch)\n            } catch(error) {\n                setError(error)\n            } finally {\n                setIsLoading(false);\n            }\n        }\n        fetchSearch ()\n\n        return(()=> {\n            controller.abort()\n        })\n    },[movieId])\n    \n\n    if (isLoading===true) {\n        return (\n            <p>Loading...</p>\n        )\n    }\n    if (isLoading!==true&&infoMovie.length!==0&&!error) {\n        return (\n            <Suspense fallback={<Loading />}>\n                <div>\n                    <NavLink to={backLinkLocationRef.current}>Go back</NavLink>\n                    <div>\n                        <img src={(infoMovie.poster_path)&&(`https://image.tmdb.org/t/p/original${infoMovie.poster_path}`)} alt=\"\" width=\"200px\"/>\n                        <div>\n                            <h1>{(infoMovie.title!==undefined)?infoMovie.title:infoMovie.name}</h1>\n                            <p>User Score: {(infoMovie.vote_average)&&(infoMovie.vote_average).toFixed(1)*10}%</p>\n                            <h2>Overview</h2>\n                            <p>{infoMovie.overview}</p>\n                            <h2>Genres</h2>\n                            <p>{(infoMovie.genres)&&(infoMovie.genres.map(genre=> genre.name).join(\" \"))}</p>\n                        </div>\n                    </div>\n                    <ul>\n                        <li>\n                            <Link to=\"cast\" state={location.state}>Cast</Link>\n                        </li>\n                    </ul>\n                </div>\n            </Suspense>\n        )\n    }\n}"],"names":["axios","KEY_API","fetchTrendingMovies","controller","signal","data","fetchDetailsMovie","id","AboutFilm","movieId","useParams","moviesId","useState","infoMovie","setInfoMovie","isLoading","setIsLoading","error","setError","location","useLocation","backLinkLocationRef","useRef","state","from","useEffect","AbortController","fetchedSearch","fetchSearch","abort","length","Suspense","fallback","to","current","src","poster_path","alt","width","undefined","title","name","vote_average","toFixed","overview","genres","map","genre","join"],"sourceRoot":""}