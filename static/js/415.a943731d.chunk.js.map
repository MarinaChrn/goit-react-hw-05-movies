{"version":3,"file":"static/js/415.a943731d.chunk.js","mappings":"uRAEAA,EAAAA,EAAAA,SAAAA,QAAuB,+BACvB,IAAMC,EAAU,mCAEHC,EAAmB,mCAAG,WAAMC,GAAN,yFACVH,EAAAA,EAAAA,IAAA,oCAAuCC,GAAW,CAACG,OAAQD,EAAWC,SAD5D,uBACxBC,EADwB,EACxBA,KADwB,kBAExBA,GAFwB,2CAAH,sDAKnBC,EAAiB,mCAAG,WAAMC,EAAIJ,GAAV,yFACRH,EAAAA,EAAAA,IAAA,iBAAoBO,EAApB,oBAAkCN,GAAW,CAACG,OAAQD,EAAWC,SADzD,uBACtBC,EADsB,EACtBA,KADsB,kBAEtBA,GAFsB,2CAAH,wDAUjBG,EAAkB,mCAAG,WAAMC,EAAON,GAAb,yFACTH,EAAAA,EAAAA,IAAA,8BAAiCS,EAAjC,oBAAkDR,GAAW,CAACG,OAAQD,EAAWC,SADxE,uBACvBC,EADuB,EACvBA,KADuB,kBAEvBA,GAFuB,2CAAH,wDAKlBK,EAAe,mCAAG,WAAMD,EAAON,GAAb,yFACNH,EAAAA,EAAAA,IAAA,iBAAoBS,EAApB,4BAA6CR,EAA7C,uBAA2E,CAACG,OAAQD,EAAWC,SADzF,uBACpBC,EADoB,EACpBA,KADoB,kBAEpBA,EAAKM,MAFe,2CAAH,uD,iGCtBfC,GAAOC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,2H,SCAJE,EAAe,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,QAASC,EAAU,EAAVA,MACnC,OACI,yBACI,SAACL,EAAD,CAAMM,GAAE,kBAAaF,EAAQT,IAAMY,KAAG,EAAEF,MAAOA,EAA/C,wBAA2EG,IAAhBJ,EAAQK,MAAmBL,EAAQK,MAAML,EAAQM,SAGvH,ECPYC,EAAOV,EAAAA,GAAAA,GAAH,kLCcjB,EAXkB,SAAC,GAAkB,IAAjBW,EAAgB,EAAhBA,WACVC,GAAWC,EAAAA,EAAAA,MACjB,OACI,SAACH,EAAD,UAC0B,IAApBC,EAAWG,QACTH,EAAWI,KAAI,SAAAC,GAAO,OAAI,SAACd,EAAD,CAAcC,QAASa,EAA0BZ,MAAO,CAAEa,KAAML,IAA3BI,EAAQtB,GAAjD,KAIrC,C,kHC2BD,UAnCa,WACT,OAA0BwB,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAAoBJ,EAAAA,EAAAA,UAAS,MAArBK,GAAR,eAsBA,OApBAC,EAAAA,EAAAA,YAAU,WACN,IAAMlC,EAAa,IAAImC,gBADb,wCAEV,oGAEQH,GAAa,GACbC,EAAS,MAHjB,UAIoClC,EAAAA,EAAAA,IAAoBC,GAJxD,OAIcoC,EAJd,OAKQN,GAAS,OAAIM,EAAcC,UALnC,gDAOQJ,EAAS,EAAD,IAPhB,yBAUQD,GAAa,GAVrB,6EAFU,sBAiBV,OAjBU,mCAeVM,GAEO,kBAAKtC,EAAWuC,OAAhB,CACV,GAAC,KAKM,4BACMR,IAAa,uCACZA,IAAe,SAAC,IAAD,CAAWV,WAAYQ,MAGnD,C","sources":["api.js","components/ListFilmItem.styled.js","components/ListFilmItem.jsx","components/ListFilms.styled.js","components/ListFilms.jsx","pages/Home.jsx"],"sourcesContent":["import axios from \"axios\";\n\naxios.defaults.baseURL=\"https://api.themoviedb.org/3\";\nconst KEY_API = 'c67a48adb3404d662a84d5e73bbe6a15';\n\nexport const fetchTrendingMovies = async(controller)=> {\n    const {data} = await axios.get(`/trending/all/day?api_key=${KEY_API}`, {signal: controller.signal});\n    return data ;\n}\n\nexport const fetchDetailsMovie = async(id, controller)=> {\n    const {data} = await axios.get(`/movie/${id}?api_key=${KEY_API}`, {signal: controller.signal});\n    return data ;\n}\n\nexport const fetchCastMovie = async(id, controller)=> {\n    const {data} = await axios.get(`/movie/${id}/credits?api_key=${KEY_API}`, {signal: controller.signal});\n    return data ;\n}\n\nexport const fetchSearchByValue = async(value, controller)=> {\n    const {data} = await axios.get(`/search/movie?query=${value}&api_key=${KEY_API}`, {signal: controller.signal});\n    return data ;\n}\n\nexport const fetchCastOfFilm = async(value, controller)=> {\n    const {data} = await axios.get(`/movie/${value}/credits?api_key=${KEY_API}&page=1&per_page=20`, {signal: controller.signal});\n    return data.cast ;\n}","import styled from \"styled-components\";\nimport { NavLink } from \"react-router-dom\";\n\nexport const Link = styled(NavLink)`\n    text-decoration: none;\n    color: black;\n    &:hover, &:focus {\n        color: red;\n    }\n`","import { Link } from \"./ListFilmItem.styled\";\nimport PropTypes from \"prop-types\"\n\nexport const ListFilmItem = ({filmInf, state})=> {\n    return (\n        <li>\n            <Link to={`/movies/${filmInf.id}`} end  state={state}>{`${(filmInf.title!==undefined)?filmInf.title:filmInf.name}`}</Link>\n        </li>\n    )\n}\n\nListFilmItem.propTypes = {\n    filmInf: PropTypes.object,\n    state: PropTypes.object.isRequired,\n}","import styled from \"styled-components\";\n\nexport const List = styled.ul`\n    list-style: disc;\n    margin-left: 20px;\n    margin-top: 20px;\n    padding: 0px;\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n`","import { useLocation } from \"react-router-dom\";\nimport {ListFilmItem} from \"./ListFilmItem\";\nimport { List } from \"./ListFilms.styled\";\nimport PropTypes from \"prop-types\";\n\nconst ListFilms = ({arrayFilms}) => {\n    const location = useLocation();\n    return (\n        <List>\n            {(arrayFilms.length!==0)&&(\n                arrayFilms.map(element => <ListFilmItem filmInf={element} key={element.id} state={{ from: location }}/>)\n            )}\n        </List>\n    )\n}\n\nexport default ListFilms;\nListFilms.propTypes = {\n    arrayFilms: PropTypes.array.isRequired,\n}","\nimport {fetchTrendingMovies} from \"api\";\nimport ListFilms from \"components/ListFilms\";\nimport { useEffect } from \"react\";\nimport { useState } from \"react\";\n\nconst Home = () => {\n    const [trend, setTrend] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const [,setError] = useState(null);\n\n    useEffect(()=>{\n        const controller = new AbortController();\n        async function fetchSearch () {    \n            try {\n                setIsLoading(true);\n                setError(null);\n                const fetchedSearch = await fetchTrendingMovies(controller)\n                setTrend([...fetchedSearch.results])\n            } catch(errors) {\n                setError(errors)\n                \n            } finally {\n                setIsLoading(false);\n            }\n        }\n        fetchSearch ()\n\n        return(()=> controller.abort())\n    },[])\n\n    return (\n        \n        (\n            <main>\n                {(isLoading)&&(<p>Loading...</p>)}\n                {(!isLoading) && (<ListFilms arrayFilms={trend}/>)}\n            </main>\n        )\n    )}\n\nexport default Home;"],"names":["axios","KEY_API","fetchTrendingMovies","controller","signal","data","fetchDetailsMovie","id","fetchSearchByValue","value","fetchCastOfFilm","cast","Link","styled","NavLink","ListFilmItem","filmInf","state","to","end","undefined","title","name","List","arrayFilms","location","useLocation","length","map","element","from","useState","trend","setTrend","isLoading","setIsLoading","setError","useEffect","AbortController","fetchedSearch","results","fetchSearch","abort"],"sourceRoot":""}