{"version":3,"file":"static/js/635.2fc6f3d3.chunk.js","mappings":"yRAEaA,EAAgBC,EAAAA,GAAAA,QAAH,0ICAbC,EAAcD,EAAAA,GAAAA,IAAH,mGAOXE,EAAiBF,EAAAA,GAAAA,IAAH,+DAKdG,EAAaH,EAAAA,GAAAA,IAAH,yF,SCXVI,EAAe,SAAC,GAAa,IAAZC,EAAW,EAAXA,MAC1B,OACI,UAACJ,EAAD,YACI,SAACC,EAAD,CAAgBI,IAAG,6CAAwCD,EAAME,cAAgBC,IAAI,MACrF,UAACL,EAAD,YACI,wBAAKE,EAAMI,QACX,uBAAIJ,EAAMK,iBAIzB,ECiCD,EAvCiB,WACb,OAAkCC,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAAqBJ,EAAAA,EAAAA,UAAS,MAArBK,GAAT,eACOC,GAAYC,EAAAA,EAAAA,MAAZD,SACDE,EAAQ,kBAAcF,GAsB5B,OArBAG,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAa,IAAIC,gBADZ,wCAEX,oGAEQP,GAAa,GACbC,EAAS,MAHjB,UAIoCO,EAAAA,EAAAA,IAAgBN,EAAUI,GAJ9D,OAIcG,EAJd,OAKQX,EAAaW,EAAcC,MAAM,EAAG,KAL5C,gDAOQT,EAAS,EAAD,IAPhB,yBASQD,GAAa,GATrB,6EAFW,sBAgBX,OAhBW,mCAcXW,GAEO,WACHL,EAAWM,OACd,CACJ,GAAC,CAACV,KAGC,UAAClB,EAAD,WACMe,IAAa,sCACM,IAAnBF,EAAUgB,SAAed,IACvB,gCACKF,EAAUiB,KAAK,SAAAC,GAAE,OAAG,SAAC1B,EAAD,CAAcC,MAAOyB,GAASA,EAAGC,GAApC,KAClB,SAAC,KAAD,CAAgBC,GAAIb,EAApB,wBAInB,C","sources":["components/CastFilm.styled.js","components/CastFilmCard.styled.js","components/CastFilmCard.jsx","components/CastFilm.jsx"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const StyledSection = styled.section`\n    display: flex;\n    flex-direction: column;\n    gap: 20px;\n    margin-top: 40px;\n    margin-bottom: 40px;\n`","import styled from \"styled-components\";\n\nexport const LayoutActor = styled.div`\n    display: flex;\n    gap: 40px;\n    width: 400px;\n    height: 300px;\n`\n\nexport const StyledImgActor = styled.img`\n    width: 200px;\n    height: 300px;\n`\n\nexport const AboutActor = styled.div`\n    display: flex;\n    flex-direction: column;\n    gap: 15px;\n`","import { AboutActor, LayoutActor, StyledImgActor } from \"./CastFilmCard.styled\"\nimport PropTypes from \"prop-types\";\n\nexport const CastFilmCard = ({actor}) => {\n    return (\n        <LayoutActor>\n            <StyledImgActor src={`https://image.tmdb.org/t/p/original${actor.profile_path}`} alt=\"\"/>\n            <AboutActor>\n                <h3>{actor.name}</h3>\n                <p>{actor.character}</p>\n            </AboutActor>\n        </LayoutActor>\n    )\n}\n\nCastFilmCard.propTypes = {\n    actor: PropTypes.object.isRequired\n}","import { fetchCastOfFilm } from \"api\";\nimport { StyledNavLinks } from \"pages/AboutFilm.styled\";\nimport { useEffect, useState } from \"react\";\nimport {useParams } from \"react-router-dom\";\nimport { StyledSection } from \"./CastFilm.styled\";\nimport { CastFilmCard } from \"./CastFilmCard\";\n\nconst CastFilm = () =>{\n    const [castMovie, setCastMovie] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const [, setError] = useState(null);\n    const {moviesId} = useParams();\n    const pathname = `/movies/${moviesId}`\n    useEffect(()=> {\n        const controller = new AbortController();\n        async function fetchSearch () {    \n            try {\n                setIsLoading(true);\n                setError(null);\n                const fetchedSearch = await fetchCastOfFilm(moviesId, controller)\n                setCastMovie(fetchedSearch.slice(0, 10))\n            } catch(error) {\n                setError(error)\n            } finally {\n                setIsLoading(false);\n            }\n        }\n        fetchSearch ()\n\n        return(()=> {\n            controller.abort()\n        })\n    },[moviesId])\n\n    return (\n        <StyledSection>\n            {(isLoading)&&(<p>Loading...</p>)}\n            {(castMovie.length!==0)&&(!isLoading)&&(\n                <>\n                    {castMovie.map( el =><CastFilmCard actor={el} key={el.id}/>)}\n                    <StyledNavLinks to={pathname}>Close</StyledNavLinks>\n                </>)}\n        </StyledSection>\n    )\n}\n\nexport default CastFilm;"],"names":["StyledSection","styled","LayoutActor","StyledImgActor","AboutActor","CastFilmCard","actor","src","profile_path","alt","name","character","useState","castMovie","setCastMovie","isLoading","setIsLoading","setError","moviesId","useParams","pathname","useEffect","controller","AbortController","fetchCastOfFilm","fetchedSearch","slice","fetchSearch","abort","length","map","el","id","to"],"sourceRoot":""}