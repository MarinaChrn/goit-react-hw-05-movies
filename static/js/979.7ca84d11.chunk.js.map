{"version":3,"file":"static/js/979.7ca84d11.chunk.js","mappings":"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","sources":["api.js","components/SharedLayout.styled.js","pages/AboutFilm.styled.js","pages/AboutFilm.jsx"],"sourcesContent":["import axios from \"axios\";\n\naxios.defaults.baseURL=\"https://api.themoviedb.org/3\";\nconst KEY_API = 'c67a48adb3404d662a84d5e73bbe6a15';\n\nexport const fetchTrendingMovies = async(controller)=> {\n    const {data} = await axios.get(`/trending/all/day?api_key=${KEY_API}`, {signal: controller.signal});\n    return data ;\n}\n\nexport const fetchDetailsMovie = async(id, controller)=> {\n    const {data} = await axios.get(`/movie/${id}?api_key=${KEY_API}`, {signal: controller.signal});\n    return data ;\n}\n\nexport const fetchCastMovie = async(id, controller)=> {\n    const {data} = await axios.get(`/movie/${id}/credits?api_key=${KEY_API}`, {signal: controller.signal});\n    return data ;\n}\n\nexport const fetchSearchByValue = async(value, controller)=> {\n    const {data} = await axios.get(`/search/movie?query=${value}&api_key=${KEY_API}`, {signal: controller.signal});\n    return data ;\n}\n\nexport const fetchCastOfFilm = async(value, controller)=> {\n    const {data} = await axios.get(`/movie/${value}/credits?api_key=${KEY_API}&page=1&per_page=20`, {signal: controller.signal});\n    return data.cast ;\n}","import styled from \"styled-components\";\nimport { NavLink } from \"react-router-dom\";\n\nexport const HomeLink = styled(NavLink)`\n    text-decoration: none;\n    color:black;\n    font-size: 26px;\n    font-weight: 500;\n    &:hover, &:focus {\n        color: red;\n    }\n    &.active {\n        color: red;\n    }\n`\n\nexport const Layout = styled.header`\n    display: flex;\n    margin-top:20px;\n    margin-bottom:20px;\n    gap: 30px;\n`\n\nexport const Line = styled.hr`\n    color: #ababab;\n    margin-left: -80px;\n`","import styled from \"styled-components\";\nimport { NavLink } from \"react-router-dom\";\n\nexport const StyledLink = styled(NavLink)`\n    text-decoration: none;\n    color:black;\n    font-size: 18px;\n    display: flex;\n    gap: 5px;\n    align-items: center;\n    &:hover, &:focus {\n        color:red;\n    }\n    margin-bottom: 20px;\n    margin-top: 20px;\n`\n\nexport const StyledLayout = styled.div`\n    display: flex;\n    gap: 80px;\n    margin: 20px 0;\n`\n\nexport const StyledImg = styled.img`\n    width: 300px;\n    height: auto;\n`\n\nexport const StyledAboutFilm = styled.div`\n    max-width: 500px;\n`","import { fetchDetailsMovie } from \"api\";\nimport { useParams, useLocation, Link, Outlet, } from \"react-router-dom\";\nimport { useEffect, useState,useRef} from \"react\";\nimport { Loading } from \"components/Loading\";\nimport { Suspense } from \"react\";\nimport {FiArrowLeft} from \"react-icons/fi\";\nimport {StyledAboutFilm, StyledImg, StyledLayout, StyledLink} from \"./AboutFilm.styled.js\";\nimport { Line } from \"components/SharedLayout.styled\";\n\nconst AboutFilm = ()=> {\n    const movieId = useParams().moviesId;\n    const [infoMovie, setInfoMovie] = useState({});\n    const [isLoading, setIsLoading] = useState(false);\n    const [, setError] = useState(null);\n\n    const location = useLocation();\n    const backLinkLocationRef = useRef(location.state?.from ?? '/');\n\n    useEffect(()=>{\n        const controller = new AbortController();\n        async function fetchSearch () {    \n            try {\n                setIsLoading(true);\n                setError(null);\n                const fetchedSearch = await fetchDetailsMovie(movieId,controller)\n                setInfoMovie(fetchedSearch)\n            } catch(error) {\n                setError(error)\n            } finally {\n                setIsLoading(false);\n            }\n        }\n        fetchSearch ()\n\n        return(()=> {\n            controller.abort()\n        })\n    },[movieId])\n    \n\n    if (isLoading===true) {\n        return (\n            <p>Loading...</p>\n        )\n    }\n    if (isLoading!==true&&infoMovie.length!==0) {\n        return (\n            <Suspense fallback={<Loading />}>\n                <div>\n                    <StyledLink to={backLinkLocationRef.current}><FiArrowLeft/>Go back</StyledLink>\n                    <Line/>\n                    <StyledLayout>\n                        <StyledImg src={(infoMovie.poster_path)&&(`https://image.tmdb.org/t/p/original${infoMovie.poster_path}`)} alt=\"\" width=\"200px\"/>\n                        <StyledAboutFilm>\n                            <h1>{(infoMovie.title!==undefined)?infoMovie.title:infoMovie.name}</h1>\n                            <p>User Score: {(infoMovie.vote_average)&&(infoMovie.vote_average).toFixed(1)*10}%</p>\n                            <h2>Overview</h2>\n                            <p>{infoMovie.overview}</p>\n                            <h2>Genres</h2>\n                            <p>{(infoMovie.genres)&&(infoMovie.genres.map(genre=> genre.name).join(\" \"))}</p>\n                        </StyledAboutFilm>\n                    </StyledLayout>\n                    <Line/>\n                    <h2>Additional information</h2>\n                    <ul>\n                        <li>\n                            <Link to=\"cast\" state={location.state}>Cast</Link>\n                        </li>\n                    </ul>\n                </div>\n                <Outlet/>\n            </Suspense>\n        )\n    }\n}\n\nexport default AboutFilm;"],"names":["axios","KEY_API","fetchTrendingMovies","controller","signal","data","fetchDetailsMovie","id","fetchSearchByValue","value","fetchCastOfFilm","cast","HomeLink","styled","NavLink","Layout","Line","StyledLink","StyledLayout","StyledImg","StyledAboutFilm","movieId","useParams","moviesId","useState","infoMovie","setInfoMovie","isLoading","setIsLoading","setError","location","useLocation","backLinkLocationRef","useRef","state","from","useEffect","AbortController","fetchedSearch","fetchSearch","abort","length","Suspense","fallback","Loading","to","current","src","poster_path","alt","width","undefined","title","name","vote_average","toFixed","overview","genres","map","genre","join"],"sourceRoot":""}